/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ClientWhereUniqueInput } from "../../client/base/ClientWhereUniqueInput";
import { ValidateNested, IsOptional, IsDate } from "class-validator";
import { Type } from "class-transformer";
import { PrestataireWhereUniqueInput } from "../../prestataire/base/PrestataireWhereUniqueInput";
import { PropertyWhereUniqueInput } from "../../property/base/PropertyWhereUniqueInput";
import { VerificationUpdateManyWithoutContractsInput } from "./VerificationUpdateManyWithoutContractsInput";

@InputType()
class ContractUpdateInput {
  @ApiProperty({
    required: false,
    type: () => ClientWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ClientWhereUniqueInput)
  @IsOptional()
  @Field(() => ClientWhereUniqueInput, {
    nullable: true,
  })
  client?: ClientWhereUniqueInput | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  endDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => PrestataireWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PrestataireWhereUniqueInput)
  @IsOptional()
  @Field(() => PrestataireWhereUniqueInput, {
    nullable: true,
  })
  prestataire?: PrestataireWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => PropertyWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PropertyWhereUniqueInput)
  @IsOptional()
  @Field(() => PropertyWhereUniqueInput, {
    nullable: true,
  })
  property?: PropertyWhereUniqueInput | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => VerificationUpdateManyWithoutContractsInput,
  })
  @ValidateNested()
  @Type(() => VerificationUpdateManyWithoutContractsInput)
  @IsOptional()
  @Field(() => VerificationUpdateManyWithoutContractsInput, {
    nullable: true,
  })
  verifications?: VerificationUpdateManyWithoutContractsInput;
}

export { ContractUpdateInput as ContractUpdateInput };
