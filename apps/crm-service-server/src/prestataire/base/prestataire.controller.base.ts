/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PrestataireService } from "../prestataire.service";
import { PrestataireCreateInput } from "./PrestataireCreateInput";
import { Prestataire } from "./Prestataire";
import { PrestataireFindManyArgs } from "./PrestataireFindManyArgs";
import { PrestataireWhereUniqueInput } from "./PrestataireWhereUniqueInput";
import { PrestataireUpdateInput } from "./PrestataireUpdateInput";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractWhereUniqueInput } from "../../contract/base/ContractWhereUniqueInput";

export class PrestataireControllerBase {
  constructor(protected readonly service: PrestataireService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Prestataire })
  async createPrestataire(
    @common.Body() data: PrestataireCreateInput
  ): Promise<Prestataire> {
    return await this.service.createPrestataire({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        serviceType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Prestataire] })
  @ApiNestedQuery(PrestataireFindManyArgs)
  async prestataires(@common.Req() request: Request): Promise<Prestataire[]> {
    const args = plainToClass(PrestataireFindManyArgs, request.query);
    return this.service.prestataires({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        serviceType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Prestataire })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async prestataire(
    @common.Param() params: PrestataireWhereUniqueInput
  ): Promise<Prestataire | null> {
    const result = await this.service.prestataire({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        serviceType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Prestataire })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePrestataire(
    @common.Param() params: PrestataireWhereUniqueInput,
    @common.Body() data: PrestataireUpdateInput
  ): Promise<Prestataire | null> {
    try {
      return await this.service.updatePrestataire({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          serviceType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Prestataire })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePrestataire(
    @common.Param() params: PrestataireWhereUniqueInput
  ): Promise<Prestataire | null> {
    try {
      return await this.service.deletePrestataire({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          serviceType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/contracts")
  @ApiNestedQuery(ContractFindManyArgs)
  async findContracts(
    @common.Req() request: Request,
    @common.Param() params: PrestataireWhereUniqueInput
  ): Promise<Contract[]> {
    const query = plainToClass(ContractFindManyArgs, request.query);
    const results = await this.service.findContracts(params.id, {
      ...query,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,

        prestataire: {
          select: {
            id: true,
          },
        },

        property: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contracts")
  async connectContracts(
    @common.Param() params: PrestataireWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        connect: body,
      },
    };
    await this.service.updatePrestataire({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contracts")
  async updateContracts(
    @common.Param() params: PrestataireWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        set: body,
      },
    };
    await this.service.updatePrestataire({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contracts")
  async disconnectContracts(
    @common.Param() params: PrestataireWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        disconnect: body,
      },
    };
    await this.service.updatePrestataire({
      where: params,
      data,
      select: { id: true },
    });
  }
}
